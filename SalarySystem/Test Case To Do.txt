Case 1 : add employee

base validation of the employee

	√can add employee

	√throw name is null when its name is null

	√throw name is to long when the length of its name is larger than 32

	√throw address is null when its name is null

	√throw address is to long when the length of its name is larger than 1024
	
validate hourlyEmployee
	
	√hourlyRate is not a positive number when hourlyRate is minus
	
	√hourlyRate is not a positive number when hourlyRate is zero
	
validate MonthlyEmployee
	
	√monthlySalary is not a positive number when monthlySalary is minus
	
	√monthlySalary is not a positive number when monthlySalary is zero
	
validate SaleEmployee
	
	√commissionRate is not a positive number when commissionRate is minus
	
	√commissionRate is not a positive number when commissionRate is zero
	
	
	
validatorHelper
	√purpose: to get the needed validator 
	
	
Case 2 : DelEmp
	can delete when the employee can be found
	
	throw EmployeeCantFoundByID when can not find employee by id 
	

Case 3 : record TimeCard
WorkRecordService.logWorkStart(empID):

	can log work start when given the right empID

	should throw EmployeeCantFoundByID when cant find employee by id
	
	should throw NotAnHourlyEmloyee when the given ID is related to HourlyEmployee
	
	should throw HourlyEmloyeeHasBeenWorking when a working employee try to log start
	
WorkRecordService.logWorkEnd(empID):
	
	check employee is not null and is HourlyEmployee
	
	should_throw_HourlyEmloyeeDoesNotWorking_when_try_to_log_end_but_not_found_record
	
	should throw HourlyEmloyeeDoesNotWorking when _try_to_log_end_but_found_record_is_finish
	
WorkRecordService.getTimeCardByDate(empID,date):

	check employee is not null and is HourlyEmployee
	
	
WorkRecordService.finishCurrentDateWorkRecord(currentDate);
	
	should all record generate the right TimeCard 

	should all record move to history Table
	
	should all record remove from current Table
	
	
workRecordService.calculateTimeCardsFromWorkRecords:
	should return a timeCard when an employee with one record
	
	should_return_a_timeCard_when_an_employee_with_two_record
	
	should_return_a_timeCard_when_an_employee_with_unfinish_record
	
	
	
	
DBUnitEnvironment 
多线程 
变的是 创建相关的参数，不变的是 创建的逻辑
每个test class 主要是数据摆放的位置与class有关